
makeCacheMatrix <- function(x = matrix()) {
  m<-NULL
  set<-function(y){
  x<<-y
  ##<<- operator is introduced  to assign a value to an object in an environment that is different from the current environment
  m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
   setmatrix=setmatrix,
   getmatrix=getmatrix)
}
## cacheSolve function function first checks is the obtained matrix by getmatrix() is null
##if it is null then then it solves and obtain the inverse matrix
## if it is not then it solve using solve() function
cacheSolve <- function(x=matrix(), ...) {
    m<-x$getmatrix()
    if(!is.null(m)){
      message("cached data")
      return(m)
    }
    mid<-x$get()
##solve function is used to calculate inverse matrix
    m<-solve(mid, ...)
    x$setmatrix(m)
    m
}

##in the first attempt when we will run cacheSolve it will solve
##in second attempt m will contain data hence "cached data" message will appear and output from stored cache will show
